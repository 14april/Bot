import os
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer
from datetime import datetime, timedelta
import random
import json
import math # Import math ƒë·ªÉ d√πng math.floor (ho·∫∑c d√πng int() cho ƒë∆°n gi·∫£n)

import discord
from discord import app_commands
from discord.ext import commands

# --- FIREBASE IMPORTS ---
import firebase_admin
from firebase_admin import credentials, firestore
# ------------------------

# ==============================================================================
# C·∫§U H√åNH L∆ØU TR·ªÆ D·ªÆ LI·ªÜU V√Ä ID
# ==============================================================================

# COLLECTION_NAME l√† n∆°i l∆∞u tr·ªØ data ng∆∞·ªùi d√πng trong Firestore
COLLECTION_NAME = 'discord_bot_users'

# D·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c cache t·∫°m th·ªùi, nh∆∞ng ngu·ªìn ch√≠nh l√† Firestore
db = None

# C·∫•u h√¨nh Role ID (B·∫†N C·∫¶N THAY TH·∫æ CH√öNG B·∫∞NG ID TH·ª∞C C·ª¶A SERVER B·∫†N)
ROLE_IDS = {
    # Nh√≥m vai tr√≤ ch√≠nh
    "HERO_GROUP": 123456789012345678,
    "MONSTER_GROUP": 123456789012345679,

    # Hero Ranks (C, B, A, S)
    "HERO_C": 1428609299550175293,
    "HERO_B": 1428609397906477116,
    "HERO_A": 1428609426117492756,
    "HERO_S": 1428609449173454859,

    # Monster Ranks (Tiger, Demon, Dragon, God)
    "M_TIGER_LOW": 1428609481549414493,
    "M_TIGER_MID": 1428609524826112121,
    "M_TIGER_HIGH": 1428609554794418267,
    "M_DEMON_LOW": 1428609624952799262,
    "M_DEMON_MID": 1428609662466527272,
    "M_DEMON_HIGH": 1428609686843953236,
    "M_DRAGON_LOW": 1428609714521903186,
    "M_DRAGON_MID": 1428655205951602759,
    "M_DRAGON_HIGH": 1428655242936975392,
    "M_GOD": 1428609742116225034,

    # Ti·ªÅn t·ªá (Emoji/Icon)
    "FUND_EMOJI": "<:fund:1378705631426646016>",
    "COUPON_EMOJI": "<:coupon:1428342053548462201>",
}

# C·∫•u h√¨nh XP v√† Level
LEVEL_TIERS = {
    "HERO": {1: "HERO_C", 5: "HERO_B", 10: "HERO_A", 15: "HERO_S"},
    "MONSTER": {
        1: "M_TIGER_LOW", 3: "M_TIGER_MID", 5: "M_TIGER_HIGH",
        7: "M_DEMON_LOW", 9: "M_DEMON_MID", 11: "M_DEMON_HIGH",
        13: "M_DRAGON_LOW", 15: "M_DRAGON_MID", 17: "M_DRAGON_HIGH",
        20: "M_GOD"
    }
}
BASE_XP_TO_LEVEL = 100
XP_SCALING = 1.5

# --- C·∫¨P NH·∫¨T THEO Y√äU C·∫¶U ---
# Gi·∫£m cooldown nh·∫≠n XP khi nh·∫Øn tin t·ª´ 60s xu·ªëng 5s
XP_COOLDOWN_SECONDS = 5
# -----------------------------


# ====== Fake web server ƒë·ªÉ Render kh√¥ng b·ªã kill ======
class PingServer(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"Bot is alive")

def run_server():
    port = int(os.getenv("PORT", 10000))
    server = HTTPServer(("0.0.0.0", port), PingServer)
    server.serve_forever()

threading.Thread(target=run_server, daemon=True).start()


# ====== C·∫•u h√¨nh intents v√† bot ======
intents = discord.Intents.default()
intents.message_content = True

bot = commands.Bot(command_prefix="!", intents=intents)


# ==============================================================================
# FIRESTORE UTILITY FUNCTIONS
# ==============================================================================

def initialize_firestore():
    """Kh·ªüi t·∫°o Firebase Admin SDK s·ª≠ d·ª•ng bi·∫øn m√¥i tr∆∞·ªùng FIREBASE_CREDENTIALS."""
    global db
    if db is not None:
        return

    try:
        # L·∫•y n·ªôi dung JSON c·ªßa Service Account t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
        cred_json = os.getenv("FIREBASE_CREDENTIALS")
        if not cred_json:
            print("‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y bi·∫øn m√¥i tr∆∞·ªùng FIREBASE_CREDENTIALS.")
            return

        cred_dict = json.loads(cred_json)
        cred = credentials.Certificate(cred_dict)

        # Kh·ªüi t·∫°o ·ª©ng d·ª•ng Firebase. N·∫øu ƒë√£ kh·ªüi t·∫°o r·ªìi th√¨ kh√¥ng g·ªçi l·∫°i.
        if not firebase_admin._apps:
            firebase_admin.initialize_app(cred)
            
        db = firestore.client()
        print("‚úÖ ƒê√£ k·∫øt n·ªëi th√†nh c√¥ng v·ªõi Firestore.")

    except Exception as e:
        print(f"‚ùå L·ªói kh·ªüi t·∫°o Firebase/Firestore: {e}. Vui l√≤ng ki·ªÉm tra FIREBASE_CREDENTIALS.")
        db = None # ƒê·∫£m b·∫£o db l√† None n·∫øu th·∫•t b·∫°i


async def get_user_data(user_id):
    """L·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng t·ª´ Firestore. N·∫øu ch∆∞a c√≥, tr·∫£ v·ªÅ d·ªØ li·ªáu m·∫∑c ƒë·ªãnh."""
    global db
    if db is None:
        # Th·ª≠ kh·ªüi t·∫°o l·∫°i DB trong tr∆∞·ªùng h·ª£p on_ready ch∆∞a ch·∫°y ho·∫∑c th·∫•t b·∫°i
        initialize_firestore() 
        if db is None:
            # N·∫øu v·∫´n kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c sau khi th·ª≠ l·∫°i, tr·∫£ v·ªÅ None
            return None 

    doc_ref = db.collection(COLLECTION_NAME).document(str(user_id))
    try:
        doc = doc_ref.get()
        if doc.exists:
            data = doc.to_dict()

            # X·ª≠ l√Ω c√°c tr∆∞·ªùng datetime t·ª´ Firestore Timestamp
            if data.get('last_xp_message') and isinstance(data['last_xp_message'], firestore.client.datetime.datetime):
                data['last_xp_message'] = data['last_xp_message'].replace(tzinfo=None)
            else:
                 data['last_xp_message'] = datetime.min

            if data.get('last_daily') and isinstance(data['last_daily'], firestore.client.datetime.datetime):
                data['last_daily'] = data['last_daily'].replace(tzinfo=None)
            else:
                 data['last_daily'] = None

            return data
        else:
            # T·∫°o d·ªØ li·ªáu m·∫∑c ƒë·ªãnh n·∫øu ng∆∞·ªùi d√πng ch∆∞a t·ªìn t·∫°i
            default_data = {
                'xp': 0,
                'level': 0,
                'fund': 0,
                'coupon': 0,
                'role_group': None,
                'last_daily': None,
                'last_xp_message': datetime.min,
            }
            return default_data

    except Exception as e:
        print(f"‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu cho user {user_id}: {e}")
        # R·∫•t c√≥ th·ªÉ l√† l·ªói k·∫øt n·ªëi/m·∫°ng, ƒë·∫∑t db v·ªÅ None ƒë·ªÉ k√≠ch ho·∫°t kh·ªüi t·∫°o l·∫°i
        db = None 
        return None


async def save_user_data(user_id, data):
    """L∆∞u d·ªØ li·ªáu ng∆∞·ªùi d√πng v√†o Firestore."""
    global db
    if db is None:
        # Th·ª≠ kh·ªüi t·∫°o l·∫°i DB trong tr∆∞·ªùng h·ª£p on_ready ch∆∞a ch·∫°y ho·∫∑c th·∫•t b·∫°i
        initialize_firestore() 
        if db is None:
            print(f"üõë Kh√¥ng th·ªÉ l∆∞u d·ªØ li·ªáu cho user {user_id}. DB ch∆∞a s·∫µn s√†ng.")
            return

    doc_ref = db.collection(COLLECTION_NAME).document(str(user_id))

    # Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·ªÉ l∆∞u
    data_to_save = data.copy()

    # Firestore c√≥ th·ªÉ x·ª≠ l√Ω datetime objects, nh∆∞ng ph·∫£i lo·∫°i b·ªè datetime.min
    if data_to_save['last_xp_message'] == datetime.min:
        # S·ª≠ d·ª•ng Server Timestamp n·∫øu gi√° tr·ªã l√† datetime.min
        data_to_save['last_xp_message'] = firestore.SERVER_TIMESTAMP

    try:
        doc_ref.set(data_to_save)
    except Exception as e:
        print(f"‚ùå L·ªói khi l∆∞u d·ªØ li·ªáu cho user {user_id}: {e}")
        # R·∫•t c√≥ th·ªÉ l√† l·ªói k·∫øt n·ªëi/m·∫°ng, ƒë·∫∑t db v·ªÅ None ƒë·ªÉ k√≠ch ho·∫°t kh·ªüi t·∫°o l·∫°i
        db = None


# ==============================================================================
# CORE LOGIC FUNCTIONS: XP, LEVEL, ROLE
# ==============================================================================

def get_required_xp(level):
    """T√≠nh XP c·∫ßn thi·∫øt ƒë·ªÉ l√™n level ti·∫øp theo."""
    # C√¥ng th·ª©c: BASE * (Level + 1) ^ SCALING
    return int(BASE_XP_TO_LEVEL * (level + 1) ** XP_SCALING)

def get_current_rank_role(data):
    """X√°c ƒë·ªãnh ID Role Rank d·ª±a tr√™n Level v√† Group."""
    group = data.get('role_group')
    level = data.get('level', 0)

    if not group or level == 0:
        return None

    tiers = LEVEL_TIERS.get(group)
    if not tiers:
        return None

    current_rank_key = None
    sorted_levels = sorted(tiers.keys())
    for lvl in sorted_levels:
        if level >= lvl:
            current_rank_key = tiers[lvl]
        else:
            break

    return ROLE_IDS.get(current_rank_key) if current_rank_key else None


async def update_user_level_and_roles(member, data):
    """Ki·ªÉm tra v√† c·∫≠p nh·∫≠t Level, sau ƒë√≥ √°p d·ª•ng Role Rank m·ªõi, v√† TH√äM TH∆Ø·ªûNG ng·∫´u nhi√™n."""
    guild = member.guild
    
    # 1. Ki·ªÉm tra Level Up
    new_level = data['level']
    max_level_hero = max(LEVEL_TIERS['HERO'].keys())
    max_level_monster = max(LEVEL_TIERS['MONSTER'].keys())
    level_up_occurred = False

    while data['xp'] >= get_required_xp(new_level):
        # Ki·ªÉm tra gi·ªõi h·∫°n level cho nh√≥m hi·ªán t·∫°i
        if (data['role_group'] == 'HERO' and new_level >= max_level_hero) or \
           (data['role_group'] == 'MONSTER' and new_level >= max_level_monster):
            # ƒê√£ ƒë·∫°t max level, tho√°t v√≤ng l·∫∑p
            break 

        data['xp'] -= get_required_xp(new_level)
        new_level += 1
        level_up_occurred = True
        
        # --- TH√äM TH∆Ø·ªûNG NG·∫™U NHI√äN KHI L√äN C·∫§P ---
        # Th∆∞·ªüng Fund ng·∫´u nhi√™n (50-150) v√† Coupon ng·∫´u nhi√™n (10-30)
        reward_fund = random.randint(50, 150)
        reward_coupon = random.randint(10, 30)
        
        data['fund'] += reward_fund
        data['coupon'] += reward_coupon
        # ----------------------------------------
        
        try:
            await member.send(
                f"üéâ Ch√∫c m·ª´ng {member.mention}! B·∫°n ƒë√£ thƒÉng c·∫•p l√™n **Level {new_level}**!\n"
                f"üéÅ Th∆∞·ªüng Level Up: **+{reward_fund}** {ROLE_IDS['FUND_EMOJI']} Fund v√† **+{reward_coupon}** {ROLE_IDS['COUPON_EMOJI']} Coupon!"
            )
        except discord.Forbidden:
            pass

    if level_up_occurred:
        data['level'] = new_level
        # L∆∞u l·∫°i v√¨ Level, XP v√† Ti·ªÅn t·ªá ƒë√£ thay ƒë·ªïi
        await save_user_data(member.id, data)

    # 2. X·ª≠ l√Ω Auto Role Rank
    if data['role_group']:
        new_role_id = get_current_rank_role(data)

        if new_role_id:
            new_role = guild.get_role(new_role_id)
            if not new_role:
                return

            # X√°c ƒë·ªãnh prefix c·ªßa Rank Role ƒë·ªÉ g·ª° c√°c Rank c≈©
            group_prefix = 'HERO' if data['role_group'] == 'HERO' else 'M_' 
            
            # L·∫•y t·∫•t c·∫£ Rank Role ID c·ªßa nh√≥m hi·ªán t·∫°i
            all_rank_roles_ids = [id for key, id in ROLE_IDS.items()
                                  if key.startswith(group_prefix) and key not in ('HERO_GROUP', 'MONSTER_GROUP')]
            
            # L·ªçc ra c√°c Role c≈© c·∫ßn g·ª° (l√† Role Rank c·ªßa nh√≥m ƒë√≥ V√Ä kh√¥ng ph·∫£i Rank m·ªõi)
            roles_to_remove = [r for r in member.roles 
                               if r.id in all_rank_roles_ids and r.id != new_role.id]

            if roles_to_remove:
                await member.remove_roles(*roles_to_remove, reason="Auto Role: G·ª° Rank c≈©")

            if new_role and new_role not in member.roles:
                await member.add_roles(new_role, reason="Auto Role: C·∫•p Rank m·ªõi")
                try:
                    await member.send(f"üåü B·∫°n ƒë√£ ƒë∆∞·ª£c thƒÉng c·∫•p Rank th√†nh **{new_role.name}**!")
                except discord.Forbidden:
                    pass

# ==============================================================================
# DISCORD EVENTS & COMMANDS
# ==============================================================================

# ====== Khi bot s·∫µn s√†ng ======
@bot.event
async def on_ready():
    global db
    if db is None:
        initialize_firestore()
        if db is None:
            print("üõë L·ªói nghi√™m tr·ªçng: Kh√¥ng th·ªÉ k·∫øt n·ªëi Firestore. D·ªØ li·ªáu s·∫Ω kh√¥ng ƒë∆∞·ª£c l∆∞u tr·ªØ.")

    print(f"‚úÖ Bot Level/Ti·ªÅn t·ªá ƒë√£ ƒëƒÉng nh·∫≠p th√†nh c√¥ng: {bot.user}")
    try:
        synced = await bot.tree.sync()
        print(f"üîÅ ƒê√£ ƒë·ªìng b·ªô {len(synced)} l·ªánh slash.")
    except Exception as e:
        print(f"‚ùå L·ªói sync command: {e}")

# ====== L·∫Øng nghe tin nh·∫Øn ƒë·ªÉ t√≠nh XP ======
@bot.event
async def on_message(message):
    if message.author.bot or db is None:
        # N·∫øu db l√† None, th·ª≠ kh·ªüi t·∫°o l·∫°i ngay t·∫°i ƒë√¢y
        if db is None:
            initialize_firestore()
            if db is None:
                # N·∫øu v·∫´n kh√¥ng ƒë∆∞·ª£c, b·ªè qua x·ª≠ l√Ω tin nh·∫Øn
                await bot.process_commands(message) 
                return

    if not isinstance(message.channel, discord.TextChannel):
        await bot.process_commands(message)
        return

    user_id = message.author.id
    # L·∫•y data b·∫•t ƒë·ªìng b·ªô t·ª´ Firestore
    data = await get_user_data(user_id)
    if data is None:
        # N·∫øu data l√† None, c√≥ nghƒ©a l√† DB ch∆∞a s·∫µn s√†ng (ƒë√£ th·ª≠ kh·ªüi t·∫°o l·∫°i)
        await bot.process_commands(message)
        return

    # Gi·ªõi h·∫°n XP: ch·ªâ nh·∫≠n XP sau XP_COOLDOWN_SECONDS gi√¢y k·ªÉ t·ª´ tin nh·∫Øn cu·ªëi c√πng
    MIN_XP_COOLDOWN = timedelta(seconds=XP_COOLDOWN_SECONDS)
    last_xp = data.get('last_xp_message', datetime.min)

    # ƒê·∫£m b·∫£o last_xp l√† datetime object
    if not isinstance(last_xp, datetime):
        last_xp = datetime.min

    time_since_last_msg = datetime.now() - last_xp

    if time_since_last_msg > MIN_XP_COOLDOWN:
        xp_gain = random.randint(5, 15)
        data['xp'] += xp_gain
        data['last_xp_message'] = datetime.now()

        # C·∫≠p nh·∫≠t Level v√† Role (h√†m n√†y s·∫Ω g·ªçi save_user_data n·∫øu level thay ƒë·ªïi)
        await update_user_level_and_roles(message.author, data)

        # Lu√¥n l∆∞u l·∫°i XP v√† last_xp_message (tr·ª´ khi ƒë√£ ƒë∆∞·ª£c l∆∞u trong update_user_level_and_roles)
        # T·∫£i l·∫°i data ƒë·ªÉ so s√°nh level c≈©, tr√°nh tr∆∞·ªùng h·ª£p b·ªã m·∫•t data n·∫øu update_user_level_and_roles ƒë√£ save
        current_db_data = await get_user_data(user_id)
        if current_db_data and data['level'] == current_db_data.get('level', 0):
            await save_user_data(user_id, data)

    await bot.process_commands(message)


# ====== L·ªánh /buff_xp (CH·ªà D√ÄNH CHO GUILD OWNER) ======
@bot.tree.command(name="buff_xp", description="[OWNER ONLY] Th√™m XP cho ng∆∞·ªùi d√πng ƒë·ªÉ ki·ªÉm tra h·ªá th·ªëng.")
@app_commands.describe(member="Ng∆∞·ªùi d√πng mu·ªën buff XP", amount="S·ªë l∆∞·ª£ng XP mu·ªën th√™m")
@commands.is_owner() 
async def buff_xp(interaction: discord.Interaction, member: discord.Member, amount: int):
    # Ki·ªÉm tra Guild Owner (ch·ªß server)
    if interaction.guild.owner_id != interaction.user.id:
        await interaction.response.send_message(
            "‚ùå L·ªánh n√†y ch·ªâ d√†nh cho Ch·ªß Server (Guild Owner).", ephemeral=True
        )
        return

    if amount <= 0:
        await interaction.response.send_message("‚ùå S·ªë l∆∞·ª£ng XP ph·∫£i l·ªõn h∆°n 0.", ephemeral=True)
        return

    data = await get_user_data(member.id)

    if data is None:
        await interaction.response.send_message("‚ùå L·ªói: C∆° s·ªü d·ªØ li·ªáu ch∆∞a s·∫µn s√†ng. Vui l√≤ng th·ª≠ l·∫°i sau v√†i gi√¢y.", ephemeral=True)
        return

    old_level = data['level']
    data['xp'] += amount

    # C·∫≠p nh·∫≠t Level v√† Role
    await update_user_level_and_roles(member, data)

    # L∆∞u l·∫°i data sau khi buff
    await save_user_data(member.id, data)

    new_level = data['level']

    response_msg = f"‚úÖ ƒê√£ th√™m **{amount} XP** cho {member.mention}.\n"
    response_msg += f"XP hi·ªán t·∫°i: **{data['xp']}** (Level **{new_level}**).\n"

    if new_level > old_level:
        response_msg += f"**üéâ ThƒÉng c·∫•p t·ª´ Level {old_level} l√™n Level {new_level}!**"

    await interaction.response.send_message(response_msg)


# ====== L·ªánh /profile (Hi·ªÉn th·ªã th√¥ng tin ng∆∞·ªùi d√πng) ======
@bot.tree.command(name="profile", description="Xem Level, XP v√† s·ªë ti·ªÅn c·ªßa b·∫°n")
async def profile(interaction: discord.Interaction):
    user_id = interaction.user.id
    data = await get_user_data(user_id)

    if data is None:
        await interaction.response.send_message("‚ùå L·ªói: C∆° s·ªü d·ªØ li·ªáu ch∆∞a s·∫µn s√†ng. Vui l√≤ng th·ª≠ l·∫°i sau v√†i gi√¢y.", ephemeral=True)
        return

    required_xp = get_required_xp(data['level'])

    # X√°c ƒë·ªãnh Rank hi·ªán t·∫°i v√† t√™n
    rank_role_id = get_current_rank_role(data)
    rank_name = interaction.guild.get_role(rank_role_id).name if rank_role_id else "Ch∆∞a x·∫øp h·∫°ng"
    group_name = data.get('role_group', 'Ch∆∞a ch·ªçn nh√≥m')

    embed = discord.Embed(title=f"üë§ Th√¥ng tin H·ªì s∆° c·ªßa {interaction.user.display_name}", color=discord.Color.blue())
    embed.add_field(name="üìú Nh√≥m Role", value=group_name, inline=False)
    embed.add_field(name="‚≠ê C·∫•p ƒê·ªô (Level)", value=f"**{data['level']}**", inline=True)
    embed.add_field(name="üèÜ Rank/H·∫°ng", value=rank_name, inline=True)
    embed.add_field(name="üìà XP", value=f"**{data['xp']}** / {required_xp} XP", inline=False)
    embed.add_field(name="üí∞ Fund", value=f"**{data['fund']}** {ROLE_IDS['FUND_EMOJI']}", inline=True)
    embed.add_field(name="üéüÔ∏è Coupon", value=f"**{data['coupon']}** {ROLE_IDS['COUPON_EMOJI']}", inline=True)

    await interaction.response.send_message(embed=embed, ephemeral=True)


# ====== L·ªánh /daily (ƒêi·ªÉm danh nh·∫≠n ti·ªÅn) ======
@bot.tree.command(name="daily", description="ƒêi·ªÉm danh m·ªói ng√†y ƒë·ªÉ nh·∫≠n Fund v√† Coupon (Reset 0:00)")
async def daily(interaction: discord.Interaction):
    user_id = interaction.user.id
    data = await get_user_data(user_id)

    if data is None:
        await interaction.response.send_message("‚ùå L·ªói: C∆° s·ªü d·ªØ li·ªáu ch∆∞a s·∫µn s√†ng. Vui l√≤ng th·ª≠ l·∫°i sau v√†i gi√¢y.", ephemeral=True)
        return

    now = datetime.now()
    last_daily = data.get('last_daily')
    now_date = now.date()

    # Logic reset v√†o 0:00 (n·ª≠a ƒë√™m)
    if last_daily and last_daily.date() == now_date:
        # ƒê√£ ƒëi·ªÉm danh h√¥m nay, t√≠nh th·ªùi gian c√≤n l·∫°i ƒë·∫øn 0:00 ng√†y mai
        next_reset = datetime(now_date.year, now_date.month, now_date.day) + timedelta(days=1)
        remaining_time = next_reset - now
        
        hours, remainder = divmod(int(remaining_time.total_seconds()), 3600)
        minutes, seconds = divmod(remainder, 60)

        await interaction.response.send_message(
            f"‚è≥ B·∫°n ƒë√£ ƒëi·ªÉm danh h√¥m nay r·ªìi! L∆∞·ª£t ƒëi·ªÉm danh m·ªõi s·∫Ω c√≥ l√∫c **0:00** (n·ª≠a ƒë√™m) h·∫±ng ng√†y. Vui l√≤ng ch·ªù **{hours} gi·ªù {minutes} ph√∫t** n·ªØa.",
            ephemeral=True
        )
        return

    # T√≠nh th∆∞·ªüng
    fund_reward = random.randint(100, 300)
    coupon_reward = random.randint(50, 150)

    data['fund'] += fund_reward
    data['coupon'] += coupon_reward
    data['last_daily'] = now

    await save_user_data(user_id, data) # L∆ØU V√ÄO FIRESTORE

    await interaction.response.send_message(
        f"‚úÖ Ch√∫c m·ª´ng! B·∫°n ƒë√£ ƒëi·ªÉm danh th√†nh c√¥ng v√† nh·∫≠n ƒë∆∞·ª£c:\n"
        f"**+{fund_reward}** {ROLE_IDS['FUND_EMOJI']} Fund\n"
        f"**+{coupon_reward}** {ROLE_IDS['COUPON_EMOJI']} Coupon",
        ephemeral=True
    )

# ====== L·ªánh /exchange (Quy ƒë·ªïi ti·ªÅn t·ªá) ======
@bot.tree.command(name="exchange", description="Quy ƒë·ªïi 1 Fund = 1 Coupon")
@app_commands.describe(amount="S·ªë Fund mu·ªën quy ƒë·ªïi sang Coupon")
async def exchange(interaction: discord.Interaction, amount: int):
    user_id = interaction.user.id
    data = await get_user_data(user_id)

    if data is None:
        await interaction.response.send_message("‚ùå L·ªói: C∆° s·ªü d·ªØ li·ªáu ch∆∞a s·∫µn s√†ng. Vui l√≤ng th·ª≠ l·∫°i sau v√†i gi√¢y.", ephemeral=True)
        return

    if amount <= 0:
        await interaction.response.send_message("‚ùå S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n 0.", ephemeral=True)
        return

    if data['fund'] < amount:
        await interaction.response.send_message(
            f"‚ùå B·∫°n kh√¥ng ƒë·ªß Fund. B·∫°n ch·ªâ c√≥ **{data['fund']}** {ROLE_IDS['FUND_EMOJI']}.",
            ephemeral=True
        )
        return

    data['fund'] -= amount
    data['coupon'] += amount

    await save_user_data(user_id, data) # L∆ØU V√ÄO FIRESTORE

    await interaction.response.send_message(
        f"‚úÖ Quy ƒë·ªïi th√†nh c√¥ng!\n"
        f"ƒê√£ tr·ª´ **{amount}** {ROLE_IDS['FUND_EMOJI']} Fund.\n"
        f"ƒê√£ th√™m **{amount}** {ROLE_IDS['COUPON_EMOJI']} Coupon.\n"
        f"S·ªë d∆∞ Fund m·ªõi: **{data['fund']}**. S·ªë d∆∞ Coupon m·ªõi: **{data['coupon']}**.",
        ephemeral=True
    )

# ====== L·ªánh /select (Ch·ªçn Role Group Hero/Monster) ======
@bot.tree.command(name="select", description="Ch·ªçn nh√≥m vai tr√≤ ch√≠nh: Hero ho·∫∑c Monster")
async def select_group(interaction: discord.Interaction):
    user_id = interaction.user.id
    data = await get_user_data(user_id)

    if data is None:
        await interaction.response.send_message("‚ùå L·ªói: C∆° s·ªü d·ªØ li·ªáu ch∆∞a s·∫µn s√†ng. Vui l√≤ng th·ª≠ l·∫°i sau v√†i gi√¢y.", ephemeral=True)
        return

    class RoleGroupSelect(discord.ui.View):
        def __init__(self, data):
            super().__init__(timeout=600)
            self.data = data
            self.current_group = data.get('role_group')

        async def _update_roles(self, i: discord.Interaction, new_group_name):
            member = i.user
            guild = i.guild

            new_group_key = f"{new_group_name.upper()}_GROUP"
            new_role_id = ROLE_IDS[new_group_key]
            new_role = guild.get_role(new_role_id)

            old_group_name = self.current_group
            old_role_id = ROLE_IDS[f"{old_group_name.upper()}_GROUP"] if old_group_name else None
            old_role = guild.get_role(old_role_id) if old_role_id else None

            msg = ""

            # X·ª≠ l√Ω H·ªßy ch·ªçn (Toggle off)
            if old_group_name and old_group_name.lower() == new_group_name.lower():
                self.data['role_group'] = None
                if new_role:
                    await member.remove_roles(new_role, reason="H·ªßy ch·ªçn Role Group")
                msg = f"ƒê√£ **H·ª¶Y** ch·ªçn nh√≥m **{new_group_name.upper()}**."

                # G·ª° t·∫•t c·∫£ role rank c≈©
                group_prefix = 'HERO' if old_group_name == 'HERO' else 'M_' 
                all_rank_roles_ids = [id for key, id in ROLE_IDS.items()
                                      if key.startswith(group_prefix) and key not in ('HERO_GROUP', 'MONSTER_GROUP')]
                
                roles_to_remove = [r for r in member.roles if r.id in all_rank_roles_ids]
                if roles_to_remove:
                    await member.remove_roles(*roles_to_remove, reason="H·ªßy Role Group: G·ª° Rank")

            # X·ª≠ l√Ω Ch·ªçn m·ªõi/ƒê·ªïi nh√≥m
            else:
                self.data['role_group'] = new_group_name.upper()

                if old_role and old_role in member.roles:
                    await member.remove_roles(old_role, reason="Chuy·ªÉn Role Group: G·ª° nh√≥m c≈©")
                    msg += f"ƒê√£ g·ª° nh√≥m **{old_group_name.upper()}**.\n"

                if new_role and new_role not in member.roles:
                    await member.add_roles(new_role, reason="Ch·ªçn Role Group m·ªõi")

                msg += f"‚úÖ B·∫°n ƒë√£ ch·ªçn nh√≥m **{new_group_name.upper()}**."

                # T·ª± ƒë·ªông c·∫•p Rank m·ªõi sau khi ch·ªçn nh√≥m
                await update_user_level_and_roles(member, self.data)

            self.current_group = self.data['role_group']
            await save_user_data(i.user.id, self.data) # L∆ØU V√ÄO FIRESTORE
            await i.response.edit_message(content=msg, view=self)

        @discord.ui.button(label="Hero", style=discord.ButtonStyle.primary, emoji="ü¶∏‚Äç‚ôÇÔ∏è")
        async def hero_button(self, i: discord.Interaction, button: discord.ui.Button):
            await self._update_roles(i, "hero")

        @discord.ui.button(label="Monster", style=discord.ButtonStyle.danger, emoji="üëπ")
        async def monster_button(self, i: discord.Interaction, button: discord.ui.Button):
            await self._update_roles(i, "monster")

    await interaction.response.send_message(
        "Vui l√≤ng ch·ªçn nh√≥m vai tr√≤ ch√≠nh c·ªßa b·∫°n:",
        view=RoleGroupSelect(data),
        ephemeral=True
    )

# ====== L·ªánh /all_in (C∆∞·ª£c 80% s·ªë ti·ªÅn) ======
# ƒê·ªãnh nghƒ©a c√°c l·ª±a ch·ªçn cho l·ªánh
CURRENCY_CHOICES = [
    app_commands.Choice(name="Fund", value="fund"),
    app_commands.Choice(name="Coupon", value="coupon"),
]

@bot.tree.command(name="all_in", description="C∆∞·ª£c 80% Fund ho·∫∑c Coupon b·∫°n ƒëang c√≥ (Th·∫Øng x2, Thua m·∫•t h·∫øt)")
@app_commands.describe(currency="Lo·∫°i ti·ªÅn t·ªá b·∫°n mu·ªën c∆∞·ª£c")
@app_commands.choices(currency=CURRENCY_CHOICES)
async def all_in(interaction: discord.Interaction, currency: app_commands.Choice[str]):
    user_id = interaction.user.id
    data = await get_user_data(user_id)

    if data is None:
        await interaction.response.send_message("‚ùå L·ªói: C∆° s·ªü d·ªØ li·ªáu ch∆∞a s·∫µn s√†ng. Vui l√≤ng th·ª≠ l·∫°i sau v√†i gi√¢y.", ephemeral=True)
        return
    
    currency_key = currency.value # 'fund' ho·∫∑c 'coupon'
    currency_name = currency.name # 'Fund' ho·∫∑c 'Coupon'
    currency_emoji = ROLE_IDS[f"{currency_key.upper()}_EMOJI"]
    
    current_balance = data.get(currency_key, 0)

    # T√≠nh s·ªë ti·ªÅn c∆∞·ª£c (80% t·ªïng s·ªë ti·ªÅn, l√†m tr√≤n xu·ªëng)
    bet_amount = int(current_balance * 0.8)

    if bet_amount <= 0:
        await interaction.response.send_message(
            f"‚ùå B·∫°n c·∫ßn √≠t nh·∫•t 1 {currency_name} ƒë·ªÉ c∆∞·ª£c 80% (c·∫ßn > 1.25 {currency_name}).",
            ephemeral=True
        )
        return
    
    # --- LOGIC C∆Ø·ª¢C ---
    win = random.choice([True, False]) # 50% th·∫Øng, 50% thua
    
    old_balance = current_balance
    new_balance = 0
    gain_or_loss = 0
    
    if win:
        # Th·∫Øng: nh·∫≠n l·∫°i s·ªë c∆∞·ª£c + ti·ªÅn th·∫Øng (t·ªïng c·ªông +bet_amount)
        data[currency_key] += bet_amount 
        gain_or_loss = bet_amount
        result_text = f"üéâ **TH·∫ÆNG CU·ªòC!** B·∫°n ƒë√£ nh√¢n ƒë√¥i s·ªë ti·ªÅn c∆∞·ª£c **{bet_amount:,}** {currency_emoji} {currency_name}."
    else:
        # Thua: m·∫•t s·ªë ti·ªÅn c∆∞·ª£c (-bet_amount)
        data[currency_key] -= bet_amount
        gain_or_loss = -bet_amount
        result_text = f"üíÄ **THUA C∆Ø·ª¢C!** B·∫°n ƒë√£ m·∫•t s·ªë ti·ªÅn c∆∞·ª£c **{bet_amount:,}** {currency_emoji} {currency_name}."

    new_balance = data[currency_key]

    await save_user_data(user_id, data) # L∆ØU V√ÄO FIRESTORE

    embed = discord.Embed(
        title=f"üé≤ ALL IN - C∆∞·ª£c {currency_name}", 
        description=result_text, 
        color=discord.Color.green() if win else discord.Color.red()
    )
    
    embed.add_field(name="Lo·∫°i ti·ªÅn c∆∞·ª£c", value=f"{currency_emoji} {currency_name}", inline=True)
    embed.add_field(name="S·ªë ti·ªÅn c∆∞·ª£c", value=f"**{bet_amount:,}**", inline=True)
    embed.add_field(name="L√£i/L·ªó", value=f"**{'+' if gain_or_loss >= 0 else ''}{gain_or_loss:,}**", inline=True)
    embed.add_field(name="S·ªë d∆∞ c≈©", value=f"{old_balance:,}", inline=True)
    embed.add_field(name="S·ªë d∆∞ m·ªõi", value=f"**{new_balance:,}**", inline=True)
    
    await interaction.response.send_message(embed=embed)


# ====== Ch·∫°y bot ======
TOKEN = os.getenv("DISCORD_TOKEN")
if not TOKEN:
    print("‚ö†Ô∏è Ch∆∞a c√≥ bi·∫øn m√¥i tr∆∞·ªùng DISCORD_TOKEN!")
else:
    bot.run(TOKEN)
